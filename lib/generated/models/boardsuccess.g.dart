// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'boardsuccess.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

BoardSuccess _$BoardSuccessFromJson(Map<String, dynamic> json) => BoardSuccess(
      Symbol: json['Symbol'] as String?,
      SymbolName: json['SymbolName'] as String?,
      Exchange: (json['Exchange'] as num?)?.toInt(),
      ExchangeName: json['ExchangeName'] as String?,
      CurrentPrice: (json['CurrentPrice'] as num?)?.toDouble(),
      CurrentPriceTime: json['CurrentPriceTime'] as String?,
      CurrentPriceChangeStatus: json['CurrentPriceChangeStatus'] as String?,
      CurrentPriceStatus: (json['CurrentPriceStatus'] as num?)?.toInt(),
      CalcPrice: (json['CalcPrice'] as num?)?.toDouble(),
      PreviousClose: (json['PreviousClose'] as num?)?.toDouble(),
      PreviousCloseTime: json['PreviousCloseTime'] as String?,
      ChangePreviousClose: (json['ChangePreviousClose'] as num?)?.toDouble(),
      ChangePreviousClosePer:
          (json['ChangePreviousClosePer'] as num?)?.toDouble(),
      OpeningPrice: (json['OpeningPrice'] as num?)?.toDouble(),
      OpeningPriceTime: json['OpeningPriceTime'] as String?,
      HighPrice: (json['HighPrice'] as num?)?.toDouble(),
      HighPriceTime: json['HighPriceTime'] as String?,
      LowPrice: (json['LowPrice'] as num?)?.toDouble(),
      LowPriceTime: json['LowPriceTime'] as String?,
      TradingVolume: (json['TradingVolume'] as num?)?.toDouble(),
      TradingVolumeTime: json['TradingVolumeTime'] as String?,
      VWAP: (json['VWAP'] as num?)?.toDouble(),
      TradingValue: (json['TradingValue'] as num?)?.toDouble(),
      BidQty: (json['BidQty'] as num?)?.toDouble(),
      BidPrice: (json['BidPrice'] as num?)?.toDouble(),
      BidTime: json['BidTime'] as String?,
      BidSign: json['BidSign'] as String?,
      MarketOrderSellQty: (json['MarketOrderSellQty'] as num?)?.toDouble(),
      Sell1: json['Sell1'] as Map<String, dynamic>?,
      Sell2: json['Sell2'] as Map<String, dynamic>?,
      Sell3: json['Sell3'] as Map<String, dynamic>?,
      Sell4: json['Sell4'] as Map<String, dynamic>?,
      Sell5: json['Sell5'] as Map<String, dynamic>?,
      Sell6: json['Sell6'] as Map<String, dynamic>?,
      Sell7: json['Sell7'] as Map<String, dynamic>?,
      Sell8: json['Sell8'] as Map<String, dynamic>?,
      Sell9: json['Sell9'] as Map<String, dynamic>?,
      Sell10: json['Sell10'] as Map<String, dynamic>?,
      AskQty: (json['AskQty'] as num?)?.toDouble(),
      AskPrice: (json['AskPrice'] as num?)?.toDouble(),
      AskTime: json['AskTime'] as String?,
      AskSign: json['AskSign'] as String?,
      MarketOrderBuyQty: (json['MarketOrderBuyQty'] as num?)?.toDouble(),
      Buy1: json['Buy1'] as Map<String, dynamic>?,
      Buy2: json['Buy2'] as Map<String, dynamic>?,
      Buy3: json['Buy3'] as Map<String, dynamic>?,
      Buy4: json['Buy4'] as Map<String, dynamic>?,
      Buy5: json['Buy5'] as Map<String, dynamic>?,
      Buy6: json['Buy6'] as Map<String, dynamic>?,
      Buy7: json['Buy7'] as Map<String, dynamic>?,
      Buy8: json['Buy8'] as Map<String, dynamic>?,
      Buy9: json['Buy9'] as Map<String, dynamic>?,
      Buy10: json['Buy10'] as Map<String, dynamic>?,
      OverSellQty: (json['OverSellQty'] as num?)?.toDouble(),
      UnderBuyQty: (json['UnderBuyQty'] as num?)?.toDouble(),
      TotalMarketValue: (json['TotalMarketValue'] as num?)?.toDouble(),
      ClearingPrice: (json['ClearingPrice'] as num?)?.toDouble(),
      IV: (json['IV'] as num?)?.toDouble(),
      Gamma: (json['Gamma'] as num?)?.toDouble(),
      Theta: (json['Theta'] as num?)?.toDouble(),
      Vega: (json['Vega'] as num?)?.toDouble(),
      Delta: (json['Delta'] as num?)?.toDouble(),
      SecurityType: (json['SecurityType'] as num?)?.toInt(),
    );

Map<String, dynamic> _$BoardSuccessToJson(BoardSuccess instance) =>
    <String, dynamic>{
      'Symbol': instance.Symbol,
      'SymbolName': instance.SymbolName,
      'Exchange': instance.Exchange,
      'ExchangeName': instance.ExchangeName,
      'CurrentPrice': instance.CurrentPrice,
      'CurrentPriceTime': instance.CurrentPriceTime,
      'CurrentPriceChangeStatus': instance.CurrentPriceChangeStatus,
      'CurrentPriceStatus': instance.CurrentPriceStatus,
      'CalcPrice': instance.CalcPrice,
      'PreviousClose': instance.PreviousClose,
      'PreviousCloseTime': instance.PreviousCloseTime,
      'ChangePreviousClose': instance.ChangePreviousClose,
      'ChangePreviousClosePer': instance.ChangePreviousClosePer,
      'OpeningPrice': instance.OpeningPrice,
      'OpeningPriceTime': instance.OpeningPriceTime,
      'HighPrice': instance.HighPrice,
      'HighPriceTime': instance.HighPriceTime,
      'LowPrice': instance.LowPrice,
      'LowPriceTime': instance.LowPriceTime,
      'TradingVolume': instance.TradingVolume,
      'TradingVolumeTime': instance.TradingVolumeTime,
      'VWAP': instance.VWAP,
      'TradingValue': instance.TradingValue,
      'BidQty': instance.BidQty,
      'BidPrice': instance.BidPrice,
      'BidTime': instance.BidTime,
      'BidSign': instance.BidSign,
      'MarketOrderSellQty': instance.MarketOrderSellQty,
      'Sell1': instance.Sell1,
      'Sell2': instance.Sell2,
      'Sell3': instance.Sell3,
      'Sell4': instance.Sell4,
      'Sell5': instance.Sell5,
      'Sell6': instance.Sell6,
      'Sell7': instance.Sell7,
      'Sell8': instance.Sell8,
      'Sell9': instance.Sell9,
      'Sell10': instance.Sell10,
      'AskQty': instance.AskQty,
      'AskPrice': instance.AskPrice,
      'AskTime': instance.AskTime,
      'AskSign': instance.AskSign,
      'MarketOrderBuyQty': instance.MarketOrderBuyQty,
      'Buy1': instance.Buy1,
      'Buy2': instance.Buy2,
      'Buy3': instance.Buy3,
      'Buy4': instance.Buy4,
      'Buy5': instance.Buy5,
      'Buy6': instance.Buy6,
      'Buy7': instance.Buy7,
      'Buy8': instance.Buy8,
      'Buy9': instance.Buy9,
      'Buy10': instance.Buy10,
      'OverSellQty': instance.OverSellQty,
      'UnderBuyQty': instance.UnderBuyQty,
      'TotalMarketValue': instance.TotalMarketValue,
      'ClearingPrice': instance.ClearingPrice,
      'IV': instance.IV,
      'Gamma': instance.Gamma,
      'Theta': instance.Theta,
      'Vega': instance.Vega,
      'Delta': instance.Delta,
      'SecurityType': instance.SecurityType,
    };
